generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email            String             @unique
  name             String?
  createdAt        DateTime           @default(now()) @db.Timestamptz(6)
  role             user_role          @default(trainee)
  certifications   Certification[]
  ElevenLabsAgent  ElevenLabsAgent[]
  LearningTask     LearningTask[]
  quizAttempts     QuizAttempt[]
  approvedModules  TrainingModule[]   @relation("ModuleApprover")
  trainingProgress TrainingProgress[]

  @@map("users")
}

model AISuggestion {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text        String
  kind        SuggestionType
  dictationId String         @db.Uuid
  Dictation   Dictation      @relation(fields: [dictationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([dictationId])
}

model Dictation {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  audioUrl     String
  transcript   String
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  taskId       String         @db.Uuid
  AISuggestion AISuggestion[]
  LearningTask LearningTask   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Question     Question[]

  @@index([taskId])
}

model ExternalResource {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url          String
  description  String
  taskId       String       @db.Uuid
  LearningTask LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

model Flowchart {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  mermaid      String
  taskId       String       @db.Uuid
  LearningTask LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

model LearningTask {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String
  kpiTech          String?
  kpiConcept       String?
  presenter        String
  affiliation      String?
  date             DateTime           @db.Timestamptz(6)
  userId           String             @db.Uuid
  Dictation        Dictation[]
  ExternalResource ExternalResource[]
  Flowchart        Flowchart[]
  users            User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  MediaItem        MediaItem[]
  Procedure        Procedure[]
  Simulation       Simulation[]
  SimulationObject SimulationObject[]
  YamlOutput       YamlOutput[]

  @@index([userId])
}

model MediaItem {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type               MediaType
  caption            String?
  url                String
  relevance          String?
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  taskId             String               @db.Uuid
  stepId             String?              @db.Uuid
  ProcedureStep      ProcedureStep?       @relation(fields: [stepId], references: [id], onUpdate: NoAction)
  LearningTask       LearningTask         @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ParsedMediaContent ParsedMediaContent[]

  @@index([stepId])
  @@index([taskId])
}

model Procedure {
  id                 String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title              String
  taskId             String           @db.Uuid
  simulationSettings Json?            @default("{}")
  certifications     Certification[]
  LearningTask       LearningTask     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ProcedureStep      ProcedureStep[]
  trainingModules    TrainingModule[]

  @@index([taskId])
}

model ProcedureStep {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  index       Int
  content     String
  notes       String?
  conditions  String?
  procedureId String      @db.Uuid
  MediaItem   MediaItem[]
  Procedure   Procedure   @relation(fields: [procedureId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Question    Question[]

  @@index([procedureId])
}

model Question {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type          QuestionType
  content       String
  options       String?
  correct       String?
  dictationId   String?        @db.Uuid
  stepId        String?        @db.Uuid
  Dictation     Dictation?     @relation(fields: [dictationId], references: [id], onUpdate: NoAction)
  ProcedureStep ProcedureStep? @relation(fields: [stepId], references: [id], onUpdate: NoAction)

  @@index([dictationId])
  @@index([stepId])
}

model Simulation {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  taskId         String           @db.Uuid
  LearningTask   LearningTask     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  SimulationStep SimulationStep[]

  @@index([taskId])
}

model SimulationStep {
  id               String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  prompt           String
  expectedAnswer   String?
  mediaUrl         String?
  latencyThreshold Int?
  feedback         String?
  simulationId     String     @db.Uuid
  Simulation       Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([simulationId])
}

model YamlOutput {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content      String
  taskId       String       @db.Uuid
  LearningTask LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

model TrainingModule {
  id                        String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  procedureId               String              @db.Uuid
  title                     String
  subtopics                 Json
  isApproved                Boolean             @default(false)
  approvedAt                DateTime?           @db.Timestamptz(6)
  approvedBy                String?             @db.Uuid
  createdAt                 DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  version                   Int                 @default(1)
  certificationScenarioText String?
  certifications            Certification[]
  ElevenLabsAgent           ElevenLabsAgent[]
  quizBanks                 QuizBank[]
  content                   TrainingContent[]
  approver                  User?               @relation("ModuleApprover", fields: [approvedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  procedure                 Procedure           @relation(fields: [procedureId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  progress                  TrainingProgress[]
  voiceQuestionBanks        VoiceQuestionBank[]

  @@index([procedureId])
  @@index([isApproved])
}

model TrainingContent {
  id            String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  moduleId      String              @db.Uuid
  subtopic      String
  contentType   TrainingContentType
  title         String
  content       Json
  orderIndex    Int
  estimatedTime Int
  createdAt     DateTime            @default(now()) @db.Timestamptz(6)
  module        TrainingModule      @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([moduleId])
  @@index([subtopic])
}

model QuizBank {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  moduleId     String         @db.Uuid
  subtopic     String
  questions    Json
  passingScore Int            @default(80)
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  attempts     QuizAttempt[]
  module       TrainingModule @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([moduleId])
  @@index([subtopic])
}

model QuizAttempt {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String   @db.Uuid
  quizBankId    String   @db.Uuid
  answers       Json
  score         Int
  passed        Boolean
  timeSpent     Int
  attemptNumber Int
  completedAt   DateTime @default(now()) @db.Timestamptz(6)
  quizBank      QuizBank @relation(fields: [quizBankId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@index([quizBankId])
  @@index([completedAt])
}

model Certification {
  id                  String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId              String                   @db.Uuid
  moduleId            String                   @db.Uuid
  procedureId         String                   @db.Uuid
  status              CertificationStatus      @default(NOT_STARTED)
  quizScore           Int?
  voiceInterviewScore Json?
  overallScore        Int?
  passed              Boolean                  @default(false)
  certifiedAt         DateTime?                @db.Timestamptz(6)
  voiceInterviewData  Json?
  competencyScores    Json?
  adaptiveDifficulty  String?
  module              TrainingModule           @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  procedure           Procedure                @relation(fields: [procedureId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  analytics           CertificationAnalytics[]

  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
  @@index([status])
  @@index([certifiedAt])
}

model TrainingProgress {
  id                 String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId             String         @db.Uuid
  moduleId           String         @db.Uuid
  currentSubtopic    String?
  completedSubtopics Json           @default("[]")
  timeSpent          Int            @default(0)
  lastAccessedAt     DateTime       @default(now()) @db.Timestamptz(6)
  progressPercentage Int            @default(0)
  module             TrainingModule @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}

model CertificationAnalytics {
  id              String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationId String             @db.Uuid
  userId          String             @db.Uuid
  moduleId        String             @db.Uuid
  eventType       AnalyticsEventType
  eventData       Json
  timestamp       DateTime           @default(now()) @db.Timestamptz(6)
  certification   Certification      @relation(fields: [certificationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([certificationId])
  @@index([userId])
  @@index([moduleId])
  @@index([eventType])
  @@index([timestamp])
}

model VoiceQuestionBank {
  id         String         @id @default(uuid())
  moduleId   String         @db.Uuid
  questions  Json
  difficulty String         @default("NORMAL")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  module     TrainingModule @relation(fields: [moduleId], references: [id])

  @@unique([moduleId, difficulty])
}

model Chunk {
  id             String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  documentid     String                 @db.Uuid
  text           String
  embedding      Unsupported("vector")?
  sequencenumber Int
  metadata       Json?                  @default("{}") @db.Json
  createdat      DateTime?              @default(now()) @db.Timestamptz(6)
  Document       Document               @relation(fields: [documentid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([documentid], map: "idx_chunks_document_id")
  @@index([embedding], map: "idx_chunks_embedding")
  @@index([sequencenumber], map: "idx_chunks_sequence")
}

model Document {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title      String
  content    String?
  url        String?
  filepath   String?
  sourcetype String
  broadtopic String?
  metadata   Json?     @default("{}") @db.Json
  createdat  DateTime? @default(now()) @db.Timestamptz(6)
  updatedat  DateTime? @default(now()) @db.Timestamptz(6)
  Chunk      Chunk[]

  @@index([createdat], map: "idx_documents_created_at")
  @@index([sourcetype], map: "idx_documents_source")
  @@index([broadtopic], map: "idx_documents_topic")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ElevenLabsAgent {
  id                String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  agent_id          String         @unique
  module_id         String         @db.Uuid
  scenario_id       String
  name              String
  description       String?
  configuration     Json
  competencies      String[]       @default([])
  passing_threshold Int            @default(70)
  difficulty        String         @default("NORMAL")
  is_active         Boolean        @default(true)
  created_by        String         @db.Uuid
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @default(now()) @db.Timestamptz(6)
  users             User           @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  TrainingModule    TrainingModule @relation(fields: [module_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([module_id, scenario_id])
  @@index([created_by])
  @@index([is_active])
  @@index([module_id])
  @@index([scenario_id])
}

model ParsedMediaContent {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  mediaItemId      String    @db.Uuid
  contentType      String
  extractedText    String?
  processingStatus String?   @default("pending")
  errorMessage     String?
  summary          String?
  keyTopics        Json?
  confidence       Float?
  processingTime   Int?
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6)
  MediaItem        MediaItem @relation(fields: [mediaItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([mediaItemId])
}

model RagQuery {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  query         String
  retrieveddocs Json      @db.Json
  response      String?
  userid        String?   @db.Uuid
  sessionid     String?
  createdat     DateTime? @default(now()) @db.Timestamptz(6)

  @@index([createdat], map: "idx_ragquery_created_at")
  @@index([sessionid], map: "idx_ragquery_session")
  @@index([userid], map: "idx_ragquery_user")
}

model SimulationObject {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  taskId       String       @db.Uuid
  name         String
  description  String?
  properties   Json?
  createdAt    DateTime?    @default(now()) @db.Timestamptz(6)
  LearningTask LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

model GottsQuizQuestions {
  id             String        @id(map: "gottsquizquestions_pkey1") @db.Uuid
  quiz_id        String?       @db.Uuid
  question       String?
  choices        Json?
  correct_answer Int?
  image          String?
  GottsQuizzes   GottsQuizzes? @relation(fields: [quiz_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "gottsquizquestions_quiz_id_fkey")
}

model GottsQuizzes {
  id                    String                  @id(map: "gottsquizzes_pkey") @db.Uuid
  course                String?
  module                String?
  GottsQuizQuestions    GottsQuizQuestions[]
  GottsUserQuizAttempts GottsUserQuizAttempts[]
}

model GottsUserQuizAttempts {
  id            BigInt        @id(map: "gottuserquizattempt_pkey") @default(autoincrement())
  userid        String?       @db.Uuid
  quizid        String?       @db.Uuid
  answers       Json?
  score         Int?
  passed        Boolean?
  timespent     Int?
  attemptnumber Int?
  created_at    DateTime?     @default(now()) @db.Timestamptz(6)
  completedat   DateTime?     @db.Timestamp(6)
  GottsUsers    GottsUsers?   @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
  GottsQuizzes  GottsQuizzes? @relation(fields: [quizid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "gottuserquizattempt_quizid_fkey")
}

model GottsUsers {
  id                    String                  @id(map: "gottsusers_pkey") @db.Uuid
  name                  String?
  email                 String?
  GottsUserQuizAttempts GottsUserQuizAttempts[]
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  PDF
}

enum QuestionType {
  MCQ
  OPEN_ENDED
}

enum SuggestionType {
  INSERTION
  CLARIFYING_QUESTION
  MCQ
  OPEN_ENDED
}

enum user_role {
  sme
  trainee
  admin
}

enum TrainingContentType {
  ARTICLE
  INTERACTIVE_QUIZ
  DRAG_DROP
  SCENARIO_SIMULATION
  VIDEO_CONTENT
}

enum CertificationStatus {
  NOT_STARTED
  IN_PROGRESS
  QUIZ_COMPLETED
  VOICE_INTERVIEW_SCHEDULED
  VOICE_INTERVIEW_IN_PROGRESS
  COMPLETED
  FAILED
}

enum AnalyticsEventType {
  TRAINING_STARTED
  CONTENT_VIEWED
  QUIZ_ATTEMPTED
  QUIZ_PASSED
  QUIZ_FAILED
  VOICE_INTERVIEW_STARTED
  VOICE_INTERVIEW_COMPLETED
  CERTIFICATION_ACHIEVED
  CERTIFICATION_FAILED
  VOICE_RESPONSE_SCORED
}
